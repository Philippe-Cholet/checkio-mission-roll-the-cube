# Only specs starting with c!
SPECS = '''\
c2x4:EB,5
c3x3:FA0,7
c4x4:824B,7
c4x4:9249,10
c10x10:0800000402804000000400000,39

c6x2:707,0
c3x4:5D2,0
c7x10:408000100000120400,42
c16x9:002080000000000008000400000000020800,130
c10x20:00100082000000000004000000020000000000040000000000,19
c16x25:0000000000100000220200000000000000000000000800000000000000000000000000000000000000000000000000000100,395
c25x30:00004000000000000000000000000000000000000000000000000000000000040000000000800000000000000000000000000000000000000000000000000000000400000000000000000000000000000400000400000000000000000000,197
c40x25:0010000000000000000000000000000000000000000000000000000000000000000000000000000200000040000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000004000000000000000000000000000010000000000,757
c40x35:00000000000004000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000200000000000000000000000000004000000000000000000000000000000000000,556
c42x
c50x

c10x10:6030080000000000000000001,0
c21x2:00500C02800,10
c3x21:8000000AA0000002,31
c12x10:800000000000000001002004008010,119
c20x20:40000A0000400000000000000000000000000000000000000000000000000000000000000000000100000000000000000010,21
c50x
'''
# The specs are separated in the same way as the tests.

TESTS = {
    'Basic': [
        (
            (4, 2),
            (2, 1),
            [(0, 0), (0, 1), (1, 0), (2, 0), (3, 0), (3, 1)],
        ),
        (
            (3, 3),
            (2, 1),
            [(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (2, 0)],
        ),
        (
            (4, 4),
            (1, 3),
            [(0, 0), (1, 2), (2, 1), (3, 0), (3, 2), (3, 3)],
        ),
        (
            (4, 4),
            (2, 2),
            [(0, 0), (0, 3), (1, 2), (2, 1), (3, 0), (3, 3)],
        ),
        (
            (10, 10),
            (3, 9),
            [(0, 4), (2, 9), (3, 8), (4, 0), (4, 9), (7, 7)],
        ),
    ],
    'Extra': [
        (
            (2, 6),
            (0, 0),
            [(0, 1), (0, 2), (0, 3), (1, 3), (1, 4), (1, 5)],
        ),
        (
            (4, 3),
            (0, 0),
            [(0, 1), (1, 0), (1, 1), (1, 2), (2, 1), (3, 1)],
        ),
        (
            (10, 7),
            (6, 0),
            [(0, 1), (1, 1), (3, 6), (7, 2), (7, 5), (8, 5)],
        ),
        (
            (9, 16),
            (8, 2),
            [(0, 10), (1, 0), (4, 4), (5, 5), (7, 14), (8, 4)],
        ),
        (
            (20, 10),
            (1, 9),
            [(1, 1), (2, 4), (3, 0), (7, 7), (11, 0), (15, 7)],
        ),
        (
            (25, 16),
            (24, 11),
            [(2, 11), (4, 2), (4, 6), (4, 14), (10, 12), (24, 7)],
        ),
        (
            (30, 25),
            (7, 22),
            [(0, 17), (10, 3), (11, 21), (21, 0), (25, 20), (26, 19)],
        ),
        (
            (25, 40),
            (18, 37),
            [(0, 11), (7, 38), (8, 25), (17, 4), (21, 1), (23, 39)],
        ),
        (
            (35, 40),
            (13, 36),
            [(1, 13), (7, 27), (19, 3), (27, 28), (28, 18), (31, 13)],
        ),
        (
            (47, 42),
            (41, 17),
            [(0, 22), (8, 9), (24, 40), (30, 29), (45, 15), (46, 5)],
        ),
        (
            (50, 50),
            (46, 12),
            [(1, 2), (1, 30), (2, 37), (20, 49), (30, 5), (48, 21)],
        ),
    ],
    'Surrounded': [
        (
            (10, 10),
            (0, 0),
            [(0, 1), (0, 2), (1, 0), (1, 1), (2, 0), (9, 9)],
        ),
        (
            (2, 21),
            (0, 10),
            [(0, 9), (0, 11), (0, 20), (1, 0), (1, 9), (1, 11)],
        ),
        (
            (21, 3),
            (10, 1),
            [(0, 0), (9, 1), (10, 0), (10, 2), (11, 1), (20, 2)],
        ),
        (
            (10, 12),
            (9, 11),
            [(0, 0), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7)],
        ),
        (
            (20, 20),
            (1, 1),
            [(0, 1), (1, 0), (1, 2), (2, 1), (15, 19), (19, 15)],
        ),
        (
            (50, 50),
            (0, 49),
            [(0, 47), (0, 48), (1, 48), (1, 49), (2, 49), (49, 0)],
        ),
    ],
}

TESTS = {
    category: [
        {
            'input': (dimensions, start, colored.copy()),
            'answer': (dimensions, start, colored.copy()),
        }
        for dimensions, start, colored in tests
    ]
    for category, tests in TESTS.items()
}


if __name__ == '__main__':
    from pprint import pprint

    def spec2input(spec):
        i, j, k = list(map(spec.index, 'x:,'))
        ncols, nrows = int(spec[1:i]), int(spec[i+1:j])
        hex_line = spec[j+1:k]
        start_int = int(spec[k+1:])
        assert spec == 'c%dx%d:%s,%d' % (ncols, nrows, hex_line, start_int)

        start = divmod(start_int, ncols)
        # Convert back each hex char to 4 bits.
        all_bits = [
            infos & bit
            for hex_char in hex_line
            for infos in [int(hex_char, 16)]
            for bit in (8, 4, 2, 1)
        ]
        colored = [divmod(i, ncols) for i, bit in enumerate(all_bits) if bit]
        assert len(colored) == 6
        assert all(
            0 <= r < nrows and 0 <= c < ncols
            for r, c in colored + [start]
        )

        return (nrows, ncols), start, colored

    def input2spec(dimensions, start, colored):
        nrows, ncols = dimensions
        assert start not in colored
        assert sorted(colored) == colored
        start_int = ncols * start[0] + start[1]
        assert all(
            0 <= r < nrows and 0 <= c < ncols
            for r, c in colored + [start]
        )

        # Each hex char (4 bits) will have 4 boolean "cell (r, c) is colored".
        hex_groups = []
        j, k = 0, 8
        for r in range(nrows):
            for c in range(ncols):
                if (r, c) in colored:
                    j |= k
                k >>= 1
                if not k:
                    hex_groups.append(j)
                    j, k = 0, 8
        if k != 8:
            hex_groups.append(j)
        hex_line = ''.join(map('{:X}'.format, hex_groups))

        return f'c{ncols}x{nrows}:{hex_line},{start_int}'

    SPECS = list(filter(None, SPECS.splitlines()))
    SPECS_FROM_TESTS = [
        input2spec(*test['input'])
        for _, tests in sorted(TESTS.items())
        for test in tests
    ]
    assert SPECS == SPECS_FROM_TESTS
    LIST_INPUTS = [
        test['input'] for _, tests in sorted(TESTS.items()) for test in tests
    ]
    assert list(map(spec2input, SPECS)) == LIST_INPUTS

    url = 'https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/cube.html'
    for index, spec in enumerate(SPECS, 1):
        (nrows, ncols), start, colored = spec2input(spec)
        _colored = '{%s}' % str(colored)[1:-1]
        print(
            f'    <a href="{url}#{spec}" title="{nrows} rows, {ncols} columns,'
            f' start={start}, colored={_colored}" target="_blank">{index}</a>'
        )

    real_inputs = [
        (dimensions, start, set(colored))
        for dimensions, start, colored in map(spec2input, SPECS)
    ]
    pprint(real_inputs, width=84)
